from __future__ import annotations

import asyncio
import html
import logging
import os
import random
from datetime import datetime, timedelta
from typing import Dict, Optional

from dotenv import load_dotenv
from telegram import (
    ForceReply,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.constants import ParseMode
from telegram.error import BadRequest, Forbidden
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from storage import (
    ChatMeta,
    Wish,
    count_stats,
    create_wish,
    delete_wish,
    get_or_init_chat_meta,
    get_wish,
    list_chats,
    list_wishes,
    mark_done,
    nearest_with_date,
    random_open_wish,
)
from utils import (
    MOTIVATION_PHRASES,
    RANDOM_IDEAS,
    TAG_OPTIONS,
    TIME_HORIZON_OPTIONS,
    build_summary_text,
    format_draft_price,
    format_draft_time,
    format_random_idea,
    format_wish_caption,
    parse_due_date,
    parse_price,
    tags_from_csv,
    toggle_tag,
)

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DEFAULT_TZ = os.getenv("TZ", "Europe/Moscow")

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –°–æ–∑–¥–∞–π—Ç–µ .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")

ASK_TITLE, DETAILS = range(2)
ADD_CONV_HANDLER: Optional[ConversationHandler] = None
DRAFT_KEY = "new_wish"

TIME_CODES = {
    "NOW": "‚ö° –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å",
    "MONTH": "üìÜ –≠—Ç–æ—Ç –º–µ—Å—è—Ü",
    "YEAR": "üìÖ –≠—Ç–æ—Ç –≥–æ–¥",
    "SOMEDAY": "‚è≥ –ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å",
    "DATE": "üóì –¢–æ—á–Ω–∞—è –¥–∞—Ç–∞",
}

BOTTOM_KEYBOARD = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üìã –°–ø–∏—Å–æ–∫"], ["üé≤ –†–∞–Ω–¥–æ–º", "üßæ –°–≤–æ–¥–∫–∞"]],
    resize_keyboard=True,
)


def _end_conversation_for_user(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> None:
    if ADD_CONV_HANDLER:
        ADD_CONV_HANDLER.conversations[(chat_id, user_id)] = ConversationHandler.END


def wish_action_keyboard(wish_id: int, done: bool = False) -> InlineKeyboardMarkup:
    if done:
        buttons = [[InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"WISH:DEL:{wish_id}")]]
    else:
        buttons = [
            [
                InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"WISH:DONE:{wish_id}"),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"WISH:DEL:{wish_id}"),
            ]
        ]
    return InlineKeyboardMarkup(buttons)


def add_keyboard(draft: Dict[str, object]) -> InlineKeyboardMarkup:
    menu = draft.get("menu", "main")
    if menu == "price":
        return InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("–ï—Å—Ç—å", callback_data="ADD:PRICE:SET:YES"),
                    InlineKeyboardButton("–ù–µ—Ç", callback_data="ADD:PRICE:SET:NO"),
                ],
                [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="ADD:BACK")],
            ]
        )
    if menu == "when":
        rows = [
            [InlineKeyboardButton(label, callback_data=f"ADD:WHEN:SET:{code}")]
            for code, label in TIME_CODES.items()
        ]
        rows.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="ADD:BACK")])
        return InlineKeyboardMarkup(rows)
    if menu == "tags":
        selected = set(tags_from_csv(draft.get("tags")))
        rows = []
        for index, tag in enumerate(TAG_OPTIONS):
            flag = "‚úÖ" if tag in selected else "‚ûï"
            rows.append(
                [InlineKeyboardButton(f"{flag} {tag}", callback_data=f"ADD:TAGS:TOGGLE:{index}")]
            )
        rows.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="ADD:BACK")])
        return InlineKeyboardMarkup(rows)
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("‚ûï –§–æ—Ç–æ", callback_data="ADD:PHOTO"),
                InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="ADD:PRICE:MENU"),
                InlineKeyboardButton("‚è∞ –ö–æ–≥–¥–∞", callback_data="ADD:WHEN:MENU"),
            ],
            [InlineKeyboardButton("üè∑ –¢–µ–≥–∏", callback_data="ADD:TAGS:MENU"), InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="ADD:SAVE")],
            [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="ADD:CANCEL")],
        ]
    )


def draft_preview_text(draft: Dict[str, object]) -> str:
    title = html.escape(str(draft.get("title") or "‚Äî"))
    photo = "–ï—Å—Ç—å" if draft.get("photo_file_id") else "–ù–µ—Ç"
    price = format_draft_price(draft.get("price_flag"), draft.get("price_amount"))
    when = format_draft_time(draft.get("time_horizon"), draft.get("due_date"))
    tags = ", ".join(tags_from_csv(draft.get("tags"))) or "‚Äî"
    parts = [
        "<b>–ß–µ—Ä–Ω–æ–≤–∏–∫ –∂–µ–ª–∞–Ω–∏—è</b>",
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>",
        f"–§–æ—Ç–æ: {photo}",
        f"–¶–µ–Ω–∞: {html.escape(str(price))}",
        f"–ö–æ–≥–¥–∞: {html.escape(when)}",
        f"–¢–µ–≥–∏: {html.escape(tags)}",
    ]
    return "\n".join(parts)


async def refresh_draft_message(context: ContextTypes.DEFAULT_TYPE, draft: Dict[str, object]) -> None:
    message_id = draft.get("message_id")
    chat_id = draft.get("message_chat_id")
    if not message_id or not chat_id:
        return
    try:
        await context.bot.edit_message_text(
            text=draft_preview_text(draft),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode=ParseMode.HTML,
            reply_markup=add_keyboard(draft),
        )
    except BadRequest as exc:
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫: %s", exc)


async def ensure_chat_meta(chat_id: int) -> ChatMeta:
    return await asyncio.to_thread(get_or_init_chat_meta, chat_id, DEFAULT_TZ)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    await ensure_chat_meta(chat_id)
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π wishlist-–±–æ—Ç. –ñ–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∏–¥–µ—é,"
        " –∞ /help –ø–æ–¥—Å–∫–∞–∂–µ—Ç –∫–æ–º–∞–Ω–¥—ã."
    )
    await update.effective_message.reply_text(text, reply_markup=BOTTOM_KEYBOARD)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat:
        await ensure_chat_meta(update.effective_chat.id)
    text = (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫\n"
        "/random ‚Äî –∏–¥–µ—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞\n"
        "/summary ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞\n"
        "/done <id> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
        "/delete <id> ‚Äî —É–¥–∞–ª–∏—Ç—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"
    )
    await update.effective_message.reply_text(text, reply_markup=BOTTOM_KEYBOARD)


async def add_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    await ensure_chat_meta(chat_id)
    draft = {
        "chat_id": chat_id,
        "title": None,
        "photo_file_id": None,
        "price_flag": None,
        "price_amount": None,
        "time_horizon": None,
        "due_date": None,
        "tags": "",
        "awaiting": None,
        "menu": "main",
        "message_id": None,
        "message_chat_id": None,
    }
    context.user_data[DRAFT_KEY] = draft
    reply_markup = ForceReply(selective=True, input_field_placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤)")
    await update.effective_message.reply_text(
        "–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –∂–µ–ª–∞–Ω–∏–µ? –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üí°",
        reply_markup=reply_markup,
    )
    return ASK_TITLE


async def add_receive_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message
    draft = context.user_data.get(DRAFT_KEY)
    if not message or not draft:
        return ConversationHandler.END
    if not message.reply_to_message or message.reply_to_message.from_user.id != context.bot.id:
        return ASK_TITLE
    title = message.text.strip()
    if not title:
        await message.reply_text(
            "–ù—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üí°",
            reply_markup=ForceReply(selective=True, input_field_placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è"),
        )
        return ASK_TITLE
    if len(title) > 120:
        await message.reply_text(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 120 —Å–∏–º–≤–æ–ª–æ–≤. –î–∞–≤–∞–π—Ç–µ —á—É—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ ‚úÇÔ∏è",
            reply_markup=ForceReply(selective=True, input_field_placeholder="–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"),
        )
        return ASK_TITLE
    draft["title"] = title
    preview = draft_preview_text(draft)
    keyboard = add_keyboard(draft)
    sent = await message.reply_text(preview, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    draft["message_id"] = sent.message_id
    draft["message_chat_id"] = sent.chat_id
    return DETAILS


async def add_handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = context.user_data.get(DRAFT_KEY)
    if not draft:
        return ConversationHandler.END
    if draft.get("awaiting") != "photo":
        return DETAILS
    message = update.message
    if not message or not message.photo:
        return DETAILS
    photo = message.photo[-1]
    draft["photo_file_id"] = photo.file_id
    draft["awaiting"] = None
    await message.reply_text("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ö—Ä–∞—Å–æ—Ç–∞! üì∏")
    await refresh_draft_message(context, draft)
    return DETAILS


async def add_handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = context.user_data.get(DRAFT_KEY)
    if not draft:
        return ConversationHandler.END
    awaiting = draft.get("awaiting")
    message = update.message
    if message is None:
        return DETAILS
    text = message.text.strip() if message.text else ""
    if awaiting == "price":
        try:
            parsed = parse_price(text)
        except ValueError as exc:
            await message.reply_text(str(exc))
            return DETAILS
        draft["price_flag"] = True
        draft["price_amount"] = str(parsed)
        draft["awaiting"] = None
        await message.reply_text("–ó–∞–ø–∏—Å–∞–ª–∞ —Å—É–º–º—É üí∏")
        await refresh_draft_message(context, draft)
        return DETAILS
    if awaiting == "due_date":
        try:
            due = parse_due_date(text)
        except ValueError as exc:
            await message.reply_text(str(exc))
            return DETAILS
        draft["due_date"] = due
        draft["time_horizon"] = TIME_CODES["DATE"]
        draft["awaiting"] = None
        await message.reply_text("–î–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ ‚ú®")
        await refresh_draft_message(context, draft)
        return DETAILS
    if awaiting == "photo":
        await message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ–Ω–æ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ.")
        return DETAILS
    if text:
        await message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏.")
    return DETAILS


async def add_cancel(context: ContextTypes.DEFAULT_TYPE, draft: Dict[str, object]) -> None:
    message_id = draft.get("message_id")
    chat_id = draft.get("message_chat_id")
    if message_id and chat_id:
        try:
            await context.bot.edit_message_text(
                "–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–º–µ–Ω—ë–Ω. –î–æ –Ω–æ–≤—ã—Ö –∏–¥–µ–π üíõ",
                chat_id=chat_id,
                message_id=message_id,
            )
        except BadRequest:
            pass
    context.user_data.pop(DRAFT_KEY, None)


async def add_save(query_update: Update, context: ContextTypes.DEFAULT_TYPE, draft: Dict[str, object]) -> None:
    query = query_update.callback_query
    if not draft.get("title"):
        await query.answer(
            "–ù—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ë–µ–∑ –Ω–µ–≥–æ –∏–¥–µ—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è üí°",
            show_alert=True,
        )
        return
    chat_id = draft["chat_id"]
    user = query.from_user
    wish = await asyncio.to_thread(
        create_wish,
        chat_id=chat_id,
        user_id=user.id,
        user_first_name=user.first_name,
        user_username=user.username,
        title=str(draft["title"]),
        photo_file_id=draft.get("photo_file_id"),
        price_flag=draft.get("price_flag"),
        price_amount=draft.get("price_amount"),
        time_horizon=draft.get("time_horizon"),
        due_date=draft.get("due_date"),
        tags=draft.get("tags") or None,
    )

    message_id = draft.get("message_id")
    message_chat_id = draft.get("message_chat_id")
    if message_id and message_chat_id:
        try:
            await context.bot.edit_message_reply_markup(chat_id=message_chat_id, message_id=message_id, reply_markup=None)
        except BadRequest:
            pass
    context.user_data.pop(DRAFT_KEY, None)

    caption = format_wish_caption(wish)
    keyboard = wish_action_keyboard(wish.id)
    if wish.photo_file_id:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=wish.photo_file_id,
            caption=caption,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard,
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=caption,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard,
        )

    _end_conversation_for_user(context, chat_id, user.id)

    await query.answer("–ñ–µ–ª–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ú®")


async def add_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    draft = context.user_data.get(DRAFT_KEY)
    if not draft:
        await query.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /add.", show_alert=True)
        try:
            await query.edit_message_reply_markup(reply_markup=None)
        except BadRequest:
            pass
        return
    data = query.data.split(":")
    if len(data) < 2:
        await query.answer()
        return

    action = data[1]

    if action == "PHOTO":
        draft["awaiting"] = "photo"
        draft["menu"] = "main"
        await refresh_draft_message(context, draft)
        if query.message:
            await query.message.reply_text(
                "–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –æ–Ω–æ –ø–æ–ø–∞–¥—ë—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫—É. üì∏"
            )
        await query.answer("–ñ–¥—É —Ñ–æ—Ç–æ üì∏")
        return

    if action == "PRICE":
        if len(data) == 3 and data[2] == "MENU":
            draft["menu"] = "price"
            await refresh_draft_message(context, draft)
            await query.answer()
            return
        if len(data) == 4 and data[2] == "SET":
            choice = data[3]
            if choice == "YES":
                draft["price_flag"] = True
                draft["price_amount"] = None
                draft["awaiting"] = "price"
                draft["menu"] = "main"
                await refresh_draft_message(context, draft)
                if query.message:
                    await query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ üí∏")
                await query.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
                return
            if choice == "NO":
                draft["price_flag"] = False
                draft["price_amount"] = None
                draft["awaiting"] = None
                draft["menu"] = "main"
                await refresh_draft_message(context, draft)
                await query.answer("–û—Ç–º–µ—á–µ–Ω–æ: –±–µ–∑ –±—é–¥–∂–µ—Ç–∞")
                return

    if action == "WHEN":
        if len(data) == 3 and data[2] == "MENU":
            draft["menu"] = "when"
            await refresh_draft_message(context, draft)
            await query.answer()
            return
        if len(data) == 4 and data[2] == "SET":
            code = data[3]
            label = TIME_CODES.get(code)
            if not label:
                await query.answer()
                return
            draft["time_horizon"] = label
            draft["menu"] = "main"
            if code == "DATE":
                draft["due_date"] = None
                draft["awaiting"] = "due_date"
                await refresh_draft_message(context, draft)
                if query.message:
                    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")
                await query.answer("–ñ–¥—É –¥–∞—Ç—É")
                return
            draft["due_date"] = None
            draft["awaiting"] = None
            await refresh_draft_message(context, draft)
            await query.answer("–°—Ä–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω")
            return

    if action == "TAGS":
        if len(data) == 3 and data[2] == "MENU":
            draft["menu"] = "tags"
            await refresh_draft_message(context, draft)
            await query.answer()
            return
        if len(data) == 4 and data[2] == "TOGGLE":
            try:
                index = int(data[3])
            except ValueError:
                await query.answer()
                return
            if 0 <= index < len(TAG_OPTIONS):
                tag = TAG_OPTIONS[index]
                draft["tags"] = toggle_tag(draft.get("tags"), tag)
                await refresh_draft_message(context, draft)
                active = tag in tags_from_csv(draft.get("tags"))
                await query.answer("–¢–µ–≥ –¥–æ–±–∞–≤–ª–µ–Ω" if active else "–¢–µ–≥ —É–±—Ä–∞–Ω")
                return
            await query.answer()
            return

    if action == "SAVE":
        await add_save(update, context, draft)
        return

    if action == "CANCEL":
        await add_cancel(context, draft)
        if update.effective_chat and update.effective_user:
            _end_conversation_for_user(
                context, update.effective_chat.id, update.effective_user.id
            )
        await query.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–º–µ–Ω—ë–Ω")
        return

    if action == "BACK":
        draft["menu"] = "main"
        await refresh_draft_message(context, draft)
        await query.answer()
        return

    await query.answer()


async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await send_list_page(update, context, page=0)


def build_list_text(wishes: list[Wish], page: int, total: int, per_page: int) -> str:
    if not total:
        return "–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ /add –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª."
    lines = ["<b>–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π</b>"]
    for wish in wishes:
        horizon = wish.time_horizon or "–ë–µ–∑ —Å—Ä–æ–∫–∞"
        if wish.due_date:
            horizon = f"{horizon} ‚Äî {wish.due_date.isoformat()}"
        lines.append(f"#{wish.id} ‚Äî {html.escape(wish.title)} ({html.escape(horizon)})")
    total_pages = max(1, (total + per_page - 1) // per_page)
    lines.append(f"–°—Ç—Ä. {page + 1} –∏–∑ {total_pages}")
    return "\n".join(lines)


def list_keyboard(page: int, total: int, per_page: int) -> Optional[InlineKeyboardMarkup]:
    total_pages = max(1, (total + per_page - 1) // per_page)
    if total_pages <= 1:
        return None
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"LIST:{page - 1}"))
    if page < total_pages - 1:
        buttons.append(InlineKeyboardButton("–î–∞–ª—å—à–µ ¬ª", callback_data=f"LIST:{page + 1}"))
    return InlineKeyboardMarkup([buttons]) if buttons else None


async def send_list_page(update_or_query: Update, context: ContextTypes.DEFAULT_TYPE, page: int) -> None:
    chat = update_or_query.effective_chat
    if not chat:
        return
    chat_id = chat.id
    await ensure_chat_meta(chat_id)
    per_page = 10
    wishes, total = await asyncio.to_thread(list_wishes, chat_id, "open", None, per_page, page * per_page)
    text = build_list_text(wishes, page, total, per_page)
    keyboard = list_keyboard(page, total, per_page)
    if update_or_query.callback_query:
        try:
            await update_or_query.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
            )
        except BadRequest:
            pass
        return
    await update_or_query.effective_message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard,
    )


async def list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    try:
        page = int(query.data.split(":")[1])
    except (IndexError, ValueError):
        return
    await send_list_page(update, context, page)


async def summary_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat
    if not chat:
        return
    chat_id = chat.id
    await ensure_chat_meta(chat_id)
    stats_task = asyncio.to_thread(count_stats, chat_id)
    nearest_task = asyncio.to_thread(nearest_with_date, chat_id)
    random_task = asyncio.to_thread(random_open_wish, chat_id)
    stats, nearest, random_wish_obj = await asyncio.gather(
        stats_task, nearest_task, random_task
    )
    payload = {
        "total_open": stats.get("total_open", 0),
        "by_horizon": stats.get("by_horizon", {}),
        "nearest": nearest,
        "random": random_wish_obj,
        "motivation": random.choice(MOTIVATION_PHRASES),
    }
    text = build_summary_text(payload)
    await update.effective_message.reply_text(text, parse_mode=ParseMode.HTML)


def random_keyboard(index: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚ù§Ô∏è –ë–µ—Ä—ë–º", callback_data=f"RAND:TAKE:{index}")],
            [InlineKeyboardButton("üîÅ –î–∞–π –¥—Ä—É–≥–æ–µ", callback_data="RAND:NEXT")],
            [InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data="RAND:CLOSE")],
        ]
    )


async def random_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat
    if chat:
        await ensure_chat_meta(chat.id)
    index = random.randrange(len(RANDOM_IDEAS))
    idea = RANDOM_IDEAS[index]
    text = format_random_idea(idea)
    await update.effective_message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=random_keyboard(index),
    )


async def random_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    parts = query.data.split(":")
    action = parts[1]
    if action == "NEXT":
        index = random.randrange(len(RANDOM_IDEAS))
        text = format_random_idea(RANDOM_IDEAS[index])
        await query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=random_keyboard(index))
        await query.answer("–í–æ—Ç –µ—â—ë –∏–¥–µ—è! ‚ú®")
        return
    if action == "CLOSE":
        await query.edit_message_reply_markup(reply_markup=None)
        await query.answer("–ó–∞–∫—Ä—ã—Ç–æ")
        return
    if action == "TAKE":
        try:
            index = int(parts[2])
        except (IndexError, ValueError):
            await query.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", show_alert=True)
            return
        idea = RANDOM_IDEAS[index]
        if not query.message or not query.message.chat:
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç", show_alert=True)
            return
        chat_id = query.message.chat.id
        await ensure_chat_meta(chat_id)
        user = query.from_user
        tags_csv = ",".join(idea.get("tags", [])) or None
        wish = await asyncio.to_thread(
            create_wish,
            chat_id=chat_id,
            user_id=user.id,
            user_first_name=user.first_name,
            user_username=user.username,
            title=str(idea["title"]),
            photo_file_id=None,
            price_flag=False,
            price_amount=None,
            time_horizon=idea.get("default_horizon"),
            due_date=None,
            tags=tags_csv,
        )
        caption = format_wish_caption(wish)
        await context.bot.send_message(
            chat_id=chat_id,
            text=caption,
            parse_mode=ParseMode.HTML,
            reply_markup=wish_action_keyboard(wish.id),
        )
        await query.answer("–î–æ–±–∞–≤–∏–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ ‚ù§Ô∏è")
        return


async def wish_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    parts = query.data.split(":")
    if len(parts) < 3:
        await query.answer()
        return
    action, wish_id_raw = parts[1], parts[2]
    try:
        wish_id = int(wish_id_raw)
    except ValueError:
        await query.answer()
        return
    if not query.message or not query.message.chat:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç", show_alert=True)
        return
    chat = query.message.chat
    chat_id = chat.id
    user_id = query.from_user.id
    if not await user_can_manage(chat_id, user_id, context, chat.type):
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.", show_alert=True)
        return
    if action == "DONE":
        wish = await asyncio.to_thread(mark_done, wish_id)
        if not wish or wish.chat_id != chat_id:
            await query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        caption = format_wish_caption(wish)
        keyboard = wish_action_keyboard(wish.id, done=True)
        if query.message.photo:
            await query.edit_message_caption(caption=caption, parse_mode=ParseMode.HTML, reply_markup=keyboard)
        else:
            await query.edit_message_text(caption, parse_mode=ParseMode.HTML, reply_markup=keyboard)
        await query.answer("–ì–æ—Ç–æ–≤–æ! üí´")
    elif action == "DEL":
        ok = await asyncio.to_thread(delete_wish, wish_id)
        if not ok:
            await query.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å", show_alert=True)
            return
        try:
            await query.message.delete()
        except (BadRequest, Forbidden):
            await query.edit_message_text("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
        await query.answer("–£–¥–∞–ª–µ–Ω–æ üóë")
    else:
        await query.answer()


async def user_can_manage(
    chat_id: int,
    user_id: int,
    context: ContextTypes.DEFAULT_TYPE,
    chat_type: Optional[str] = None,
) -> bool:
    if chat_type is None:
        try:
            chat = await context.bot.get_chat(chat_id)
        except Exception:
            return False
        chat_type = chat.type

    if chat_type == "private":
        return True

    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
    except Exception:
        return False
    return member.status in {"creator", "administrator"}


async def done_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /done <id>")
        return
    try:
        wish_id = int(context.args[0])
    except ValueError:
        await update.effective_message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    chat = update.effective_chat
    user = update.effective_user
    if not chat or not user:
        return
    chat_id = chat.id
    await ensure_chat_meta(chat_id)
    if not await user_can_manage(chat_id, user.id, context, chat.type):
        await update.effective_message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º.")
        return
    wish = await asyncio.to_thread(mark_done, wish_id)
    if not wish or wish.chat_id != chat_id:
        await update.effective_message.reply_text("–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    await update.effective_message.reply_text(f"–ñ–µ–ª–∞–Ω–∏–µ #{wish.id} –æ—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º ‚úÖ")


async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <id>")
        return
    try:
        wish_id = int(context.args[0])
    except ValueError:
        await update.effective_message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    chat = update.effective_chat
    user = update.effective_user
    if not chat or not user:
        return
    chat_id = chat.id
    await ensure_chat_meta(chat_id)
    if not await user_can_manage(chat_id, user.id, context, chat.type):
        await update.effective_message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∂–µ–ª–∞–Ω–∏—è.")
        return
    ok = await asyncio.to_thread(delete_wish, wish_id)
    if not ok:
        await update.effective_message.reply_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await update.effective_message.reply_text(f"–ñ–µ–ª–∞–Ω–∏–µ #{wish_id} —É–¥–∞–ª–µ–Ω–æ üóë")


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.strip()
    if text == "üìã –°–ø–∏—Å–æ–∫":
        await list_command(update, context)
    elif text == "üé≤ –†–∞–Ω–¥–æ–º":
        await random_command(update, context)
    elif text == "üßæ –°–≤–æ–¥–∫–∞":
        await summary_command(update, context)


async def add_job_biweekly(context: ContextTypes.DEFAULT_TYPE) -> None:
    chats = await asyncio.to_thread(list_chats)
    now = datetime.utcnow()
    for chat in chats:
        last_added = chat.last_added_at or chat.created_at
        if not last_added or now - last_added >= timedelta(days=14):
            idea = random.choice(RANDOM_IDEAS)
            text = (
                "–í—ã –∫–ª–∞—Å—Å–Ω—ã–µ üíû –î–æ–±–∞–≤–∏–º –º–∞–ª–µ–Ω—å–∫—É—é —Ö–æ—Ç–µ–ª–∫—É? ‚ú®\n"
                f"‚Ä¢ {idea['title']} ‚Äî {idea['description']}"
            )
            try:
                await context.bot.send_message(chat.chat_id, text)
            except Exception as exc:  # pragma: no cover - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º—è–≥–∫–∏–º–∏
                logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: %s", exc)


async def add_job_monthly(context: ContextTypes.DEFAULT_TYPE) -> None:
    chats = await asyncio.to_thread(list_chats)
    for chat in chats:
        stats_task = asyncio.to_thread(count_stats, chat.chat_id)
        nearest_task = asyncio.to_thread(nearest_with_date, chat.chat_id)
        random_task = asyncio.to_thread(random_open_wish, chat.chat_id)
        stats, nearest, random_wish_obj = await asyncio.gather(
            stats_task, nearest_task, random_task
        )
        header = (
            f"–£ –≤–∞—Å —É–∂–µ {stats.get('total_open', 0)} —Ç—ë–ø–ª—ã—Ö –ø–ª–∞–Ω–æ–≤ üíñ"
            if stats.get("total_open", 0)
            else "–ü–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –ø—É—Å—Ç–æ ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –¥–æ–±—Ä–æ–µ!"
        )
        payload = {
            "total_open": stats.get("total_open", 0),
            "by_horizon": stats.get("by_horizon", {}),
            "nearest": nearest,
            "random": random_wish_obj,
            "motivation": random.choice(MOTIVATION_PHRASES),
        }
        body = build_summary_text(payload)
        try:
            await context.bot.send_message(
                chat.chat_id,
                f"{header}\n\n{body}",
                parse_mode=ParseMode.HTML,
            )
        except Exception as exc:  # pragma: no cover
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—É—é —Å–≤–æ–¥–∫—É: %s", exc)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: %s", context.error)


async def post_init(application: Application) -> None:
    application.job_queue.run_repeating(
        add_job_biweekly,
        interval=14 * 24 * 60 * 60,
        first=60,
        name="biweekly_reminder",
        misfire_grace_time=300,
    )
    application.job_queue.run_repeating(
        add_job_monthly,
        interval=30 * 24 * 60 * 60,
        first=120,
        name="monthly_summary",
        misfire_grace_time=300,
    )


def build_application() -> Application:
    application = (
        ApplicationBuilder()
        .token(TELEGRAM_BOT_TOKEN)
        .parse_mode(ParseMode.HTML)
        .post_init(post_init)
        .build()
    )

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))

    global ADD_CONV_HANDLER
    ADD_CONV_HANDLER = ConversationHandler(
        entry_points=[
            CommandHandler("add", add_entry),
            MessageHandler(filters.Regex(r"^‚ûï –î–æ–±–∞–≤–∏—Ç—å$"), add_entry),
        ],
        states={
            ASK_TITLE: [MessageHandler(filters.TEXT & filters.REPLY & ~filters.COMMAND, add_receive_title)],
            DETAILS: [
                MessageHandler(filters.PHOTO, add_handle_photo),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_handle_text),
            ],
        },
        fallbacks=[],
        allow_reentry=True,
        per_chat=True,
        per_user=True,
    )
    application.add_handler(ADD_CONV_HANDLER)

    application.add_handler(CallbackQueryHandler(add_callback, pattern=r"^ADD:"))
    application.add_handler(MessageHandler(filters.Regex(r"^(üìã –°–ø–∏—Å–æ–∫|üé≤ –†–∞–Ω–¥–æ–º|üßæ –°–≤–æ–¥–∫–∞)$"), handle_menu_buttons))

    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CommandHandler("random", random_command))
    application.add_handler(CommandHandler("summary", summary_command))
    application.add_handler(CommandHandler("done", done_command))
    application.add_handler(CommandHandler("delete", delete_command))

    application.add_handler(CallbackQueryHandler(list_callback, pattern=r"^LIST:"))
    application.add_handler(CallbackQueryHandler(random_callback, pattern=r"^RAND:"))
    application.add_handler(CallbackQueryHandler(wish_callback, pattern=r"^WISH:"))

    application.add_error_handler(error_handler)
    return application


def main() -> None:
    application = build_application()
    application.run_polling()


if __name__ == "__main__":
    main()
